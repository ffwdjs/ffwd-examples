/* jshint node: true */
'use strict';

/*
This file was generated by generator-ffwd,
you probably should not modify it
*/

var fs = require('fs');
var utils = require('ffwd-utils/server');
var _ = utils._;
var ghm = require('marked');
var yfm = require('yfm');


/**
 * An example of feature implementation
 * @exports example-feature
 * @memberOf FFWD.server
 * @param  {Object} config ...
 * @return {Object}        ...
 */
module.exports = function(config) {
  config = config || {};
  config.pages = config.pages || 'pages';
  config.navigation = config.navigation || {};
  var ymlFileExp = /\.(yml|yaml)$/i;


  // stoopid
  config.navigation = 'pages/navigation.yml';


  /**
   * Builds the navigation for a response.
   * @param  {connect.Request}  req  ...
   * @param  {connect.Response} res  ...
   * @param  {Function} next         ...
   */
  function navigationPopulate(req, res, next) {
    if (_.isString(config.navigation)) {
      if (ymlFileExp.test(config.navigation)) {
        res.locals.navigation = yfm.read(config.navigation, {delims: ['---', '---']}).context;
      }
      else {
        res.locals.navigation = require(config.navigation);
      }
    }
    else {
      res.locals.navigation = _.result(config, 'navigation');
    }
    next();
  }

  /**
   * Reponse callback for /docs requests 
   * @param  {connect.Request}   req  ...
   * @param  {connect.Response}   res  ...
   * @param  {Function} next ...
   */
  function docRequest(req, res, next) {
    var name = req.url.slice(1);
    name = name || 'index';
    var filename = config.pages +'/'+ name +'.md';
    
    if (name.indexOf('docs') === 0) {
      return docApiRequest(req, res, next);
    }

    fs.exists(filename, function(yep) {
      if (!yep) {
        return next();
      }

      var content = yfm.read(filename);

      _.extend(res.locals, content.context);

      res.locals.body = ghm.parse(content.content);
      
      var template = name === 'index' ? 'index' : 'default';
      template = res.locals.layout ? res.locals.layout : template;
      res.render(template);
    });
  }

  function docApiRequest(req, res, next) {
    var name = req.url.slice(1);
    var parts = name.split('/');
    parts.shift();
    var side = res.locals.docSide = parts.shift();
    var features;

    // paths like /docs/features/<feature name>
    if (side === 'features') {
      features = utils.features();

      var featureName = res.locals.name = parts.shift();
      res.locals.side = '';
      if (featureName) {
        side = res.locals.side = parts.shift();
        if (side) {

        }

        res.locals.data = require(featureName +'/package.json');
        return res.render('doc-features');
      }

      res.locals.data = features;
      return res.render('doc-features-index');
    }
    
    var cwd = process.cwd();
    var docKind = res.locals.docKind = parts.shift();
    var docName = res.locals.docName = parts.shift();
    var data = require(cwd +'/doc/'+ side +'.json');


    var nav = {};
    var featuresNav = {};
    
    _.each(utils.features(), function(fPath, fName) {
      featuresNav['docs/features/'+fName+''] = {
        language: 'en',// 'en_US'
        title: fName,
        links: {}
      };
    });

    _.extend(res.locals.navigation, {
      'docs/features': {
        title: 'Features',
        links: featuresNav
      }
    });

    if (!docName) {
      if (docKind) {
        res.locals.data = _.pluck((nav['docs/'+ side +'/'+ docKind] || {}).links || [], 'title');
      }
      else {
        res.locals.data = _.map(_.keys(nav), function(n) { return n.split('/').pop(); });
      }
      return res.render('doc-api-index');
    }

    res.locals.data = _.findWhere(data, {
      kind: docKind,
      name: docName
    });

    if (!res.locals.data) {
      return next();
    }

    res.locals.title = side +' API';

    return res.render('doc-api');
  }

  return {
    request: function(req, res, next) {

      navigationPopulate(req, res, function(err) {
        if (err) {
          return next(err);
        }

        docRequest(req, res, function(err) {
          if (err) {
            return next(err);
          }

          next();
        });
      });
    },

    routes: {
      '/': {
        get: function(req, res) {
          res.send('Hello demo');
        }
      }
    }
  };
};