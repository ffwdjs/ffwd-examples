/* jshint node: true */
'use strict';

/*
This file was generated by generator-ffwd,
you probably should not modify it
*/

var _ = require('underscore');
var utils = require('ffwd-utils/server');
var spawn = require('child_process').spawn;
var cachePath = '.ffwd-serve-cache';

module.exports = function(grunt) {
  function write(id, procDef) {
    var data = {};
    try {
      data = grunt.file.readJSON(cachePath);
    } catch(err) {
      grunt.log.writeln('No .ffwd-serve-cache.json file found');
    }
    data[id] = procDef;
    grunt.file.write(cachePath, JSON.stringify(data, null, 2));
  }

  function read(id) {
    var data;
    try {
      data = grunt.file.readJSON(cachePath);
    } catch(err) {
      grunt.log.errorlns('No .ffwd-serve-cache.json file found. '+ err.stack);
    }
    return data[id];
  }


  function kill(id) {
    var procDef = read(id);
    if (procDef.pid) {
      var kill = spawn('kill', [procDef.pid]);
      kill.on('close', function() {
        grunt.log.ok('Process for '+ id +' killed');
        delete procDef.pid;
        write(id, procDef);
      });
      kill.on('error', function() {
        grunt.log.error('Process for '+ id +' can not be killed');
      });
    }
    else {
      grunt.verbose.writeln('No process for '+ id);
    }
  }


  grunt.registerTask('_ffwd-serve-start', function(id) {
    var procDef = read(id);
    grunt.log.writeln('Starting server '+ id);
    grunt.verbose[!!procDef ? 'ok' : 'error']('Process definition found');

    var env = {};
    _.extend(env, process.env, {
      NODE_PORT: procDef.options.port
    });

    var child = spawn('node', [
      '--debug',
      procDef.options.server
    ], {
      env: env
    });
    
    child.on('message', function(message) {
      grunt.log.write(procDef.options.server +' message: '+ message);
    });

    child.stdout.on('data', function(data) {
      grunt.log.write(procDef.options.server +' stdout: '+ data);
    });

    child.stderr.on('data', function(data) {
      grunt.log.error(procDef.options.server +' stderr: '+ data);
    });

    procDef.pid = child.pid;
    write(id, procDef);
    grunt.log.writeln('Started process pid '+ procDef.pid);

    grunt.task.run(((procDef.options || {}).build || []).concat([
    ]));
  });
  
  grunt.registerTask('_ffwd-serve-stop', function(id) {
    var procDef = read(id);
    grunt.log.writeln('Stoping server '+ id +', ('+ procDef.pid +')');
    kill(id);
    grunt.verbose[!!procDef ? 'ok' : 'error']('Process definition found');

    // var child = procDef[id].process;
    // child.on('close', function() {
    //   grunt.log.writeln('Server process closes');
    //   delete procDef[id].process;
    // });
    // procDef[id].process.kill();
  });

  grunt.registerMultiTask('ffwd-serve', 'Start to serve and watch for changes', function() {
    var tasks = [];
    var now = new Date();
    var id = '_ad'+ now.getTime();
    var options = _.extend({}, this.data.options || {}, (this.data[this.target] || {}).options || {});
    var features = utils.featuresFiles();
    features.push('{client/scripts,server}/**/*.js');

    _.defaults(options, {
      port: 3000,
      host: 'localhost',
      server: 'app'
    });

    var procDef = {
      features: features,
      target: this.target,
      options: options
    };

    console.info('options', options);
    
    var scripts = grunt.file.expand(features);
    grunt.log.subhead('Watching '+ scripts.length +' script files');
    grunt.log.write('\n - '+ grunt.log.wordlist(scripts, {
      separator: '\n - ',
      color: 'magenta'
    }));

    grunt.config.data['express-restart'][id] = {
      options: {
        server: options.server,
        
      }
    };

    grunt.config.data.watch[id] = {
      options: {
        livereload: false
      },
      files: features,
      tasks: [
        'express-restart'+ id
        // '_ffwd-serve-stop:'+ id,
        // '_ffwd-serve-start:'+ id
      ]
    };

    tasks.push('_ffwd-serve-start:'+ id);

    tasks.push('watch:'+ id);

    write(id, procDef);
    grunt.task.run(tasks);
  });

  grunt.registerTask('_ffwd-serve', function(id) {
    for (var t in grunt.config.data) {
      delete grunt.config.data[t][id];
    }
  });
};